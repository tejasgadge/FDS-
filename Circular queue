
#include <stdio.h>
#include <stdlib.h>
struct Queue
{
 int size;
 int front;
 int rear;
 int *Q;
};
void create(struct Queue *q,int size)
{
 q->size=size;
 q->front=q->rear=0;
 q->Q=(int *)malloc(q->size*sizeof(int));
}
void enqueue(struct Queue *q,int x)
{
 if((q->rear+1)%q->size==q->front)
 printf("Queue is Full");
 else
 {
 q->rear=(q->rear+1)%q->size;
 q->Q[q->rear]=x;
 }
}
int dequeue(struct Queue *q)
{
 int x=-1;

 if(q->front==q->rear)
 printf("Queue is Empty\n");
 else
 {
 q->front=(q->front+1)%q->size;
 x=q->Q[q->front];
 }
 return x;
}
void Display(struct Queue q)
{
 int i=q.front+1;

 do
 {

 printf("%d ",q.Q[i]);
 i=(i+1)%q.size;
 }while(i!=(q.rear+1)%q.size);

 printf("\n");
}
int main()
{
 int ch;
 struct Queue q;
 do
 {
 printf("\nEnter choice : \n1.create queue \n2.enqueue \n3.dequeue \n4.display\n0.Exit\n");
 scanf("%d",&ch);
 switch (ch)
 {
 case 1:printf("\nEnter size of queue : ");
        scanf("%d",&ch);
        create(&q,ch);
        break;
 case 2:printf("\nEnter element to enqueue : ");
        scanf("%d",&ch);
        enqueue(&q,ch);
        break;
 case 3:ch=dequeue(&q);
        if(ch!=-1)printf("\n%d is dequeue ",ch);
        break;
 case 4:Display(q);
        break;
 case 5:
        break;
 default:
     break;
 }
 }while(ch!=0);
 return 0;
}
